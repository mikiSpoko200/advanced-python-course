#!/usr/bin/python
# -*- coding: utf-8 -*-


import statistics
import random
import math
from typing import Callable
from abc import ABC, abstractmethod


class Experiment(ABC):
    """Interface describing standard functionality for a experiment."""

    @abstractmethod
    def run(self):
        """Run the experiment and calculate average number of coin tosses required."""
        ...

    @property
    @abstractmethod
    def mean(self):
        """Read only attribute providing access to mean generated by the experiment."""
        ...


class CoinToss(Experiment):
    """
    Experiment that tests how many times a coin needs to be tossed in order to roll the same side n times in a row.

    Attributes:
        successes_needed: int
        - controls how many times in a row 'success' needs to occur.

        repeat_n_times: int
        - controls how many times experiment should be repeated.

        coin_rng: int
        - Callable that allows us customize odds of 'success' and 'failure'.
          Success is signified by returning True, False otherwise.
    """

    @staticmethod
    def balanced_coin_rng() -> bool:
        return random.random() < 0.5

    def __init__(
            self,
            successes_needed: int,
            repeat_n_times: int,
            coin_rng: Callable[[], bool] = balanced_coin_rng) -> None:

        self.successes_needed = successes_needed
        self.repeat_n_times = repeat_n_times
        self.coin_rng = coin_rng
        self._mean = None
        # TODO: implement function call ordering.
        # self._method_sequencing_gen = None


    """
    
    
    """
    def run(self):
        experiment_results = []
        for _ in range(self.repeat_n_times):
            success_steak = 0
            iterations = 0
            while success_steak < self.successes_needed:
                success_steak = success_steak + 1 if self.coin_rng() else 0
                iterations += 1
            experiment_results.append(iterations)
        self._mean = statistics.mean(experiment_results)

    @property
    def mean(self):
        return math.ceil(self._mean)

    def __str__(self) -> str:
        return f"Experiment: {self.__class__.__name__}: {self.successes_needed = !r}, " \
               f"{self.repeat_n_times = !r}, {self.coin_rng.__name__ = }"


def main():
    basic_experiment = CoinToss(3, 1000)
    basic_experiment.run()
    print(str(basic_experiment))
    print(f"{basic_experiment.mean = }")


if __name__ == "__main__":
    main()
